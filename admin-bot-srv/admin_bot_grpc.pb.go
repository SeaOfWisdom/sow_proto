// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: admin-bot-srv/admin_bot.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminBotServiceClient is the client API for AdminBotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminBotServiceClient interface {
	SendFile(ctx context.Context, in *SendValidatorDiploma, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type adminBotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminBotServiceClient(cc grpc.ClientConnInterface) AdminBotServiceClient {
	return &adminBotServiceClient{cc}
}

func (c *adminBotServiceClient) SendFile(ctx context.Context, in *SendValidatorDiploma, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pp.adminbot.AdminBotService/SendFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminBotServiceServer is the server API for AdminBotService service.
// All implementations must embed UnimplementedAdminBotServiceServer
// for forward compatibility
type AdminBotServiceServer interface {
	SendFile(context.Context, *SendValidatorDiploma) (*emptypb.Empty, error)
	mustEmbedUnimplementedAdminBotServiceServer()
}

// UnimplementedAdminBotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminBotServiceServer struct {
}

func (UnimplementedAdminBotServiceServer) SendFile(context.Context, *SendValidatorDiploma) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (UnimplementedAdminBotServiceServer) mustEmbedUnimplementedAdminBotServiceServer() {}

// UnsafeAdminBotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminBotServiceServer will
// result in compilation errors.
type UnsafeAdminBotServiceServer interface {
	mustEmbedUnimplementedAdminBotServiceServer()
}

func RegisterAdminBotServiceServer(s grpc.ServiceRegistrar, srv AdminBotServiceServer) {
	s.RegisterService(&AdminBotService_ServiceDesc, srv)
}

func _AdminBotService_SendFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendValidatorDiploma)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminBotServiceServer).SendFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pp.adminbot.AdminBotService/SendFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminBotServiceServer).SendFile(ctx, req.(*SendValidatorDiploma))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminBotService_ServiceDesc is the grpc.ServiceDesc for AdminBotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminBotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pp.adminbot.AdminBotService",
	HandlerType: (*AdminBotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendFile",
			Handler:    _AdminBotService_SendFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin-bot-srv/admin_bot.proto",
}
