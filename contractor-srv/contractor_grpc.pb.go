// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: contractor.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContractorServiceClient is the client API for ContractorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContractorServiceClient interface {
	PublishWork(ctx context.Context, in *PublishWorkRequest, opts ...grpc.CallOption) (*PublishWorkResponce, error)
	GetStatus(ctx context.Context, in *TxStatusRequest, opts ...grpc.CallOption) (ContractorService_GetStatusClient, error)
}

type contractorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContractorServiceClient(cc grpc.ClientConnInterface) ContractorServiceClient {
	return &contractorServiceClient{cc}
}

func (c *contractorServiceClient) PublishWork(ctx context.Context, in *PublishWorkRequest, opts ...grpc.CallOption) (*PublishWorkResponce, error) {
	out := new(PublishWorkResponce)
	err := c.cc.Invoke(ctx, "/pp.contractor.ContractorService/PublishWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractorServiceClient) GetStatus(ctx context.Context, in *TxStatusRequest, opts ...grpc.CallOption) (ContractorService_GetStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContractorService_ServiceDesc.Streams[0], "/pp.contractor.ContractorService/GetStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &contractorServiceGetStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContractorService_GetStatusClient interface {
	Recv() (*TxStatusResponce, error)
	grpc.ClientStream
}

type contractorServiceGetStatusClient struct {
	grpc.ClientStream
}

func (x *contractorServiceGetStatusClient) Recv() (*TxStatusResponce, error) {
	m := new(TxStatusResponce)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ContractorServiceServer is the server API for ContractorService service.
// All implementations must embed UnimplementedContractorServiceServer
// for forward compatibility
type ContractorServiceServer interface {
	PublishWork(context.Context, *PublishWorkRequest) (*PublishWorkResponce, error)
	GetStatus(*TxStatusRequest, ContractorService_GetStatusServer) error
	mustEmbedUnimplementedContractorServiceServer()
}

// UnimplementedContractorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContractorServiceServer struct {
}

func (UnimplementedContractorServiceServer) PublishWork(context.Context, *PublishWorkRequest) (*PublishWorkResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishWork not implemented")
}
func (UnimplementedContractorServiceServer) GetStatus(*TxStatusRequest, ContractorService_GetStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedContractorServiceServer) mustEmbedUnimplementedContractorServiceServer() {}

// UnsafeContractorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContractorServiceServer will
// result in compilation errors.
type UnsafeContractorServiceServer interface {
	mustEmbedUnimplementedContractorServiceServer()
}

func RegisterContractorServiceServer(s grpc.ServiceRegistrar, srv ContractorServiceServer) {
	s.RegisterService(&ContractorService_ServiceDesc, srv)
}

func _ContractorService_PublishWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractorServiceServer).PublishWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pp.contractor.ContractorService/PublishWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractorServiceServer).PublishWork(ctx, req.(*PublishWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractorService_GetStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TxStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContractorServiceServer).GetStatus(m, &contractorServiceGetStatusServer{stream})
}

type ContractorService_GetStatusServer interface {
	Send(*TxStatusResponce) error
	grpc.ServerStream
}

type contractorServiceGetStatusServer struct {
	grpc.ServerStream
}

func (x *contractorServiceGetStatusServer) Send(m *TxStatusResponce) error {
	return x.ServerStream.SendMsg(m)
}

// ContractorService_ServiceDesc is the grpc.ServiceDesc for ContractorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContractorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pp.contractor.ContractorService",
	HandlerType: (*ContractorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishWork",
			Handler:    _ContractorService_PublishWork_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStatus",
			Handler:       _ContractorService_GetStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "contractor.proto",
}
